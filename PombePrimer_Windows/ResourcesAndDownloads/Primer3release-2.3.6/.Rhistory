"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=3",
"PRIMER_PAIR_WT_DIFF_TM=0.3",
"PRIMER_WT_HAIRPIN_TH=6",
"=")
func.primer_HRLF <- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_RIGHT_START=899",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PICK_ANYWAY=1",
"PRIMER_PRODUCT_SIZE_RANGE=600-900"),
pconfig),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_LF_', name)
return(designed.primers)
}
HR_LF.primers <- do.call(rbind, mapply(func.primer_HRLF, name=as.character(gene.list$nameID), sequence=gene.list$LF, SIMPLIFY=F))
View(HR_LF.primers)
pconfig <- c(                   #basic primer3 configuration
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=15",
"PRIMER_PAIR_WT_DIFF_TM=0.3",
"PRIMER_WT_HAIRPIN_TH=6",
"=")
func.primer_HRLF <- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_RIGHT_START=899",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PICK_ANYWAY=1",
"PRIMER_PRODUCT_SIZE_RANGE=600-900"),
pconfig),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_LF_', name)
return(designed.primers)
}
HR_LF.primers <- do.call(rbind, mapply(func.primer_HRLF, name=as.character(gene.list$nameID), sequence=gene.list$LF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900"),
pconfig),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
HR.primers <- rbind(HR_LF.primers, HR_RF.primers)
View(HR_RF.primers)
pconfig <- c(                   #basic primer3 configuration
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=25",
"PRIMER_PAIR_WT_DIFF_TM=0.3",
"PRIMER_WT_HAIRPIN_TH=6",
"=")
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
HR.primers <- rbind(HR_LF.primers, HR_RF.primers)
View(HR_RF.primers)
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900"),
pconfig),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
HR.primers <- rbind(HR_LF.primers, HR_RF.primers)
View(HR_RF.primers)
pconfig <- c(                   #basic primer3 configuration
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=25",
"PRIMER_WT_HAIRPIN_TH=6",
"=")
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
pconfig <- c(                   #basic primer3 configuration
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=25"
"=")
pconfig <- c(                   #basic primer3 configuration
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=55",
"PRIMER_OPT_TM=60",
"PRIMER_MAX_TM=62",
"PRIMER_NUM_RETURN=2",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_PICK_LEFT_PRIMER=1",
"PRIMER_PICK_RIGHT_PRIMER=1",
"PRIMER_OPT_SIZE=20",
"PRIMER_MIN_SIZE=18",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PAIR_MAX_DIFF_TM=25",
"=")
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900") #,
),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(append(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900") #,
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900", #,
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
View(HR_RF.primers)
warnings()
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=0",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=27",
"PRIMER_EXPLAIN_FLAG=1"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=30",
"PRIMER_EXPLAIN_FLAG=1"),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
warnings()
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=30",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=50",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
warnings()
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=30",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
View(HR_RF.primers)
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PICK_ANYWAY=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
HR.primers <- rbind(HR_LF.primers, HR_RF.primers)
View(HR.primers)
View(HR.primers)
HR.primers[HR.primers$Tm_0<50,]
HR.primers[HR.primers$Tm_0<52,]
HR.primers[HR.primers$Tm_0<55,]
lapply(HR.primers, class)
HR.primers[as.numeric(HR.primers$Tm_0)<50,]
HR.primers[as.numeric(HR.primers$Tm_0)<50, 'Tm_0']
HR.primers$Tm_0 <- as.numeric(HR.primers$Tm_0)
lapply(HR.primers, class)
sort(HR.primers$Tm_0)
class(HR.primers$Tm_0)
HR.primers$Tm_0
HR.primers <- rbind(HR_LF.primers, HR_RF.primers)
HR.primers$Tm_0 <- as.numeric(as.character(HR.primers$Tm_0))
sort(HR.primers$Tm_0)
View(HR.primers)
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
View(HR_RF.primers)
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PICK_ANYWAY=1".
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"PRIMER_PICK_ANYWAY=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
View(HR_RF.primers)
func.primer_HRRF<- function(name, sequence) {
p3.input=tempfile()     #this is the primer 3 input file, that must be present in the directory. Creating is as a temp file saves cluttering
write(c(
sprintf("SEQUENCE_ID=%s",name),
sprintf("SEQUENCE_TEMPLATE=%s",as.character(sequence)),
"SEQUENCE_FORCE_LEFT_START=1",    #forces the 5' end, use with the LF on base nchar(seq)=900
"PRIMER_PRODUCT_SIZE_RANGE=600-900",
"PRIMER_TM_FORMULA=1",
"PRIMER_SALT_CORRECTIONS=1",
"PRIMER_TASK=generic",
"PRIMER_MIN_TM=40",
"PRIMER_MAX_SIZE=35",
"PRIMER_EXPLAIN_FLAG=1",
"="),
p3.input)
out <- as.data.frame(do.call(rbind, strsplit(try(system2("primer3_core.exe", p3.input, stdout=T)), split="=")), stringsAsFactors=F)
unlink(p3.input) # delete temp files
designed.primers <- func.processprimers(out, 'HR_RF_', name)
return(designed.primers)
}
HR_RF.primers2 <- do.call(rbind, mapply(func.primer_HRRF, name=gene.list$nameID, sequence=gene.list$RF, SIMPLIFY=F))
View(HR_RF.primers2)
